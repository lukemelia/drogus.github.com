--- 
title: Livequery
typo_id: 47
layout: post
categories: ['pl']
---
Pisałem jakiś czas temu o "nieinwazyjnym javascripcie w ruby on rails":http://blog.drogomir.com/articles/2007/12/25/nieinwazyjny-javascript-razem-z-ruby-on-rails. Zapomniałem wtedy napisać o pluginie do jQuery, który ułatwia pracę stosując nieinwazyjny javascript.

"Livequery":http://brandonaaron.net/docs/livequery/ ułatwia znacznie korzystanie ze zdarzeń. Często podczas manipulowania DOM tworzy się i/lub usuwa nowe elementy. Co gdy przypiszemy do kilku elementów jakieś zdarzenie po czym dodamy nowe elementy? 

Zmontowałem prosty "przykład":http://drogomir.com/files/blog/examples/manipulation.html, na którym można to sprawdzić. Do pierwszej listy linki dodawane są bez żadnych dodatków. Zwykłe:

{% highlight javascript %}
  $('<li><a href="#">Link</a></li>').appendTo($('.without ul'));
{% endhighlight %}

Dlatego funkcja clicked uruchomi się tylko dla 2 pierwszych linków.

W drugim przypadku dodałem bind dla nowo stworzonego elementu:

{% highlight javascript %}
  $('<li><a href="#">Link</a></li>').
          appendTo($('.with ul')).
          bind('click', clicked);
{% endhighlight %}

Zdarzenie jest więc przypisywane również dla nowych linków. 

Jednak gdy ilość różnych zdarzeń zaczyna się niepokojąco powiększać, a cały interfejs strony zmienia się przy każdym prawie kliknięciu często można zapomnieć o przypisaniu zdarzeń. Nawet jeżeli ktoś nie jest zapominalski, to zapewne jest leniwy (ponoć dobrego programistę cechuje lenistwo). Na ratunek przychodzi "Livequery":http://brandonaaron.net/docs/livequery/,  plugin, który sam dba o przypisywanie lub usuwanie zdarzeń w razie manipulacji DOM.

"Drugi przykład":http://drogomir.com/files/blog/examples/manipulation.livequery.html# wykorzystuje już LiveQuery - jak można łatwo zauważyć nie trzeba już dopisywać żadnych dodatkowych funkcji.

I jedno zmartwienie przy pisaniu mniej ;-)
